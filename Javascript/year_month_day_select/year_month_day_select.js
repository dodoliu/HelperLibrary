// Generated by CoffeeScript 1.10.0
var YearMonthDaySelect;

YearMonthDaySelect = (function() {
  var KoViewModel, gParams, koTemplateA, koTemplateB, koTemplateC;

  gParams = {};

  function YearMonthDaySelect(args) {
    gParams = args;
  }

  koTemplateA = '<div data-bind="template:{name:\'sl_year_month_day_a\',data:yearObj}"></div> <div data-bind="template:{name:\'sl_year_month_day_a\',data:monthObj}"></div> <div data-bind="template:{name:\'sl_year_month_day_a\',data:dayObj}"></div> <script type="text/template" id="sl_year_month_day_a"> <select data-bind="attr:{id:$data.id,name:$data.name,class:$data.class},event:{change:$data.changeEvent},foreach:$data.dataArray,selectedOptions:[$data.selectedValue]"> <option data-bind="value:$data.key,text:$data.value"></option> </select> <span data-bind="text:$data.title"></span> </script>';

  koTemplateB = '<div data-bind="template:{name:\'sl_year_month_day_b\',data:yearObj}"></div> <div data-bind="template:{name:\'sl_year_month_day_b\',data:monthObj}"></div> <script type="text/template" id="sl_year_month_day_b"> <select data-bind="attr:{id:$data.id,name:$data.name,class:$data.class},event:{change:$data.changeEvent},foreach:$data.dataArray,selectedOptions:[$data.selectedValue]"> <option data-bind="value:$data.key,text:$data.value"></option> </select> <span data-bind="text:$data.title"></span> </script>';

  koTemplateC = '<div data-bind="template:{name:\'sl_year_month_day_c\',data:yearObj}"></div> <div data-bind="template:{name:\'sl_year_month_day_c\',data:monthObj}"></div> <div data-bind="template:{name:\'sl_year_month_day_c\',data:dayObj}"></div> <script type="text/template" id="sl_year_month_day_c"> <select data-bind="attr:{id:$data.id,name:$data.name,class:$data.class},event:{change:$data.changeEvent},foreach:$data.dataArray,selectedOptions:[$data.selectedValue]"> <option data-bind="value:$data.key,text:$data.value"></option> </select> </script>';

  KoViewModel = function(params) {
    var selfVM;
    selfVM = this;
    selfVM.yearObj = ko.observableArray();
    selfVM.monthObj = ko.observableArray();
    selfVM.dayObj = ko.observableArray();
    selfVM.GenerateYearArray = function(defaultValue) {
      var i, j, ref, ref1, tmpDataArray, tmpDate, tmpInterval, tmpYear, tmpYearClass, tmpYearDefault, tmpYearID, tmpYearName, tmpYearTitle;
      tmpDate = new Date();
      tmpDataArray = [];
      tmpInterval = selfVM.IfThenElse(gParams.yearInterval, 5);
      tmpYearDefault = selfVM.IfThenElse(gParams.yearDefault, '年');
      tmpYearTitle = selfVM.IfThenElse(gParams.yearTitle, '年');
      tmpDataArray.push({
        key: -1,
        value: tmpYearDefault
      });
      for (i = j = ref = tmpDate.getFullYear() - tmpInterval, ref1 = tmpDate.getFullYear() + tmpInterval; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
        tmpDataArray.push({
          key: i,
          value: i + gParams.yearTitle
        });
      }
      tmpYearID = selfVM.IfThenElse(gParams.yearID, 'sl_year');
      tmpYearName = selfVM.IfThenElse(gParams.yearName, 'sl_year_name');
      tmpYearClass = selfVM.IfThenElse(gParams.yearClass, 'sl_year_class');
      tmpYear = {
        title: tmpYearTitle,
        id: tmpYearID,
        name: tmpYearName,
        "class": tmpYearClass,
        changeEvent: selfVM.ChangeYear,
        selectedValue: defaultValue,
        dataArray: tmpDataArray
      };
      return selfVM.yearObj(tmpYear);
    };
    selfVM.GenerateMonthArray = function(defaultValue) {
      var i, j, tmpDataArray, tmpMonth, tmpMonthClass, tmpMonthDefault, tmpMonthID, tmpMonthName, tmpMonthTitle;
      tmpDataArray = [];
      tmpMonthDefault = selfVM.IfThenElse(gParams.monthDefault, '年');
      tmpMonthTitle = selfVM.IfThenElse(gParams.monthTitle, '月');
      tmpDataArray.push({
        key: -1,
        value: tmpMonthDefault
      });
      for (i = j = 1; j <= 12; i = ++j) {
        tmpDataArray.push({
          key: i,
          value: i + gParams.monthTitle
        });
      }
      tmpMonthID = selfVM.IfThenElse(gParams.monthID, 'sl_month');
      tmpMonthName = selfVM.IfThenElse(gParams.monthName, 'sl_month_name');
      tmpMonthClass = selfVM.IfThenElse(gParams.monthClass, 'sl_month_class');
      tmpMonth = {
        title: tmpMonthTitle,
        id: tmpMonthID,
        name: tmpMonthName,
        "class": tmpMonthClass,
        changeEvent: selfVM.ChangeMonth,
        selectedValue: defaultValue,
        dataArray: tmpDataArray
      };
      return selfVM.monthObj(tmpMonth);
    };
    selfVM.GenerateDayArray = function(year, month, defaultValue) {
      var i, j, ref, tmpDataArray, tmpDay, tmpDayClass, tmpDayDefault, tmpDayID, tmpDayName, tmpDayTitle;
      tmpDataArray = [];
      tmpDayDefault = selfVM.IfThenElse(gParams.dayDefault, '日');
      tmpDayTitle = selfVM.IfThenElse(gParams.dayTitle, '日');
      tmpDataArray.push({
        key: -1,
        value: tmpDayDefault
      });
      for (i = j = 1, ref = "" + (Helper.FindDaysInMonth(year, month)); 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        tmpDataArray.push({
          key: i,
          value: i + gParams.dayTitle
        });
      }
      tmpDayID = selfVM.IfThenElse(gParams.dayID, 'sl_day');
      tmpDayName = selfVM.IfThenElse(gParams.dayName, 'sl_day_name');
      tmpDayClass = selfVM.IfThenElse(gParams.dayClass, 'sl_day_class');
      tmpDay = {
        title: tmpDayTitle,
        id: tmpDayID,
        name: tmpDayName,
        "class": tmpDayClass,
        changeEvent: selfVM.ChangeDay,
        selectedValue: defaultValue,
        dataArray: tmpDataArray
      };
      return selfVM.dayObj(tmpDay);
    };
    selfVM.ChangeYear = function(arg) {
      var currValue;
      currValue = $("#" + arg.id + " option:selected").val();
      if (currValue === (selfVM.IfThenElse(gParams.yearDefault, '-1'))) {
        selfVM.GenerateMonthArray(-1);
        return selfVM.GenerateDayArray(1970, 1, gParams.dayDefault);
      } else {
        selfVM.GenerateMonthArray(selfVM.IfThenElse(gParams.yearDefault, '-1'));
        return selfVM.GenerateDayArray(currValue, -1, -1);
      }
    };
    selfVM.ChangeMonth = function(arg) {
      var currValue, selectedMonth, selectedYear;
      currValue = $("#" + arg.id + " option:selected").val();
      selectedYear = $("#" + gParams.yearID + " option:selected").val();
      selectedMonth = $("#" + gParams.monthID + " option:selected").val();
      if (currValue === (selfVM.IfThenElse(gParams.monthDefault, '-1'))) {
        return selfVM.GenerateDayArray(selectedYear, selectedMonth, gParams.dayDefault);
      } else {
        return selfVM.GenerateDayArray(selectedYear, selectedMonth, 1);
      }
    };
    selfVM.ChangeDay = function(arg) {};
    selfVM.Init = function() {
      var tmpDate, tmpDay, tmpMonth, tmpYear;
      if (gParams.initYear || gParams.initMonth || gParams.initDay) {
        selfVM.GenerateYearArray(gParams.initYear);
        selfVM.GenerateMonthArray(gParams.initMonth);
        return selfVM.GenerateDayArray(gParams.initYear, gParams.initMonth, gParams.initDay);
      } else {
        tmpDate = new Date();
        tmpYear = tmpDate.getFullYear();
        switch (gParams.initSelect) {
          case 3:
            selfVM.GenerateYearArray(tmpYear);
            selfVM.GenerateMonthArray(1);
            return selfVM.GenerateDayArray(tmpYear, 1, 1);
          case 2:
            tmpMonth = tmpDate.getMonth() + 1;
            tmpDay = tmpDate.getDate();
            selfVM.GenerateYearArray(tmpYear);
            selfVM.GenerateMonthArray(tmpMonth);
            return selfVM.GenerateDayArray(tmpYear, tmpMonth, tmpDay);
          default:
            tmpYear = selfVM.IfThenElse(gParams.yearDefault, '-1');
            tmpMonth = selfVM.IfThenElse(gParams.monthDefault, '-1');
            tmpDay = selfVM.IfThenElse(gParams.dayDefault, '-1');
            selfVM.GenerateYearArray(tmpYear);
            selfVM.GenerateMonthArray(tmpMonth);
            return selfVM.GenerateDayArray(tmpYear, tmpMonth, tmpDay);
        }
      }
    };
    selfVM.IfThenElse = function(value, elseValue) {
      if (value != null) {
        return value;
      } else {
        return elseValue;
      }
    };
    return selfVM.Init();
  };

  ko.components.register('year_month_day_select_a', {
    template: koTemplateA,
    viewModel: function(params) {
      return KoViewModel(params);
    }
  });

  ko.components.register('year_month_day_select_b', {
    template: koTemplateB,
    viewModel: function(params) {
      return KoViewModel(params);
    }
  });

  ko.components.register('year_month_day_select_c', {
    template: koTemplateC,
    viewModel: function(params) {
      return KoViewModel(params);
    }
  });

  return YearMonthDaySelect;

})();
